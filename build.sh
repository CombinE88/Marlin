#!/bin/bash
# Correct Syntax: ./build.sh [COM port] [verify/build] 
HERE=$(pwd)
VERSION='Voxel8 Marlin Build Script v1.0'

# Generate _Version.h using Git repo info
OUTFILE=./Marlin/_Version.h
echo "/* This file was automatically generated by: $VERSION" >"$OUTFILE"
echo " * This file should not be manually editted." >>"$OUTFILE"
echo " * It does not get committed to the repository." >>"$OUTFILE"
echo " */" >>"$OUTFILE"
echo "" >>"$OUTFILE"

echo "#define BUILD_UNIX_DATETIME" `date +%s` >>"$OUTFILE"
echo "#define STRING_DISTRIBUTION_DATE" `date '+"%Y-%m-%d %H:%M"'` >>"$OUTFILE"
( set +e
  cd "$DIR"
  BRANCH=`git symbolic-ref -q --short HEAD`
  if [ "x$BRANCH" == "x" ] ; then
    BRANCH=""
  elif [ "x$BRANCH" == "xDevelopment" ] ; then
    BRANCH=" dev"
  else
    BRANCH=" $BRANCH"
  fi
  VERSION=`git describe --tags --first-parent 2>/dev/null`
  BRANCH=$(echo $BRANCH | sed 's/\//\\\//g')
  if [ "x$VERSION" != "x" ] ; then
    echo "#define SHORT_BUILD_VERSION \"$VERSION\"" | sed "s/-.*/ $BRANCH\"/" >>"$OUTFILE"
    echo "#define DETAILED_BUILD_VERSION \"$VERSION\"" | sed "s/-/ $BRANCH-/" >>"$OUTFILE"
  else
    VERSION=`git describe --tags --first-parent --always 2>/dev/null`
    echo "#define SHORT_BUILD_VERSION \"$BRANCH\"" >>"$OUTFILE"
    echo "#define DETAILED_BUILD_VERSION \"${BRANCH}-$VERSION\"" >>"$OUTFILE"
  fi
  URL=`git config --local --get remote.origin.url | sed "sx.*github.com.xhttps://github.com/x" | sed "sx\.gitx/x"`
  if [ "x$URL" != "x" ] ; then
    echo "#define SOURCE_CODE_URL  \""$URL"\"" >>"$OUTFILE"
  fi
)

# Begin build script
if [ -z "$1" ]; then
  echo "Please enter the port of the device or specify 'verify'"
  exit 1
fi
if [ $1 = "upload" ]; then
  echo "Syntax error. Please use --help for more info."
  exit 1
elif [ $1 = "verify" ]; then
  PORT_ARG=""
  COMMAND="--verify"
elif [ $1 = "--help" ] && [ -z "$2" ]; then
  echo $VERSION
  echo "A star (*) represents a default value."
  echo ""
  echo "SYNTAX: build.sh [port [*upload | verify]]"
  echo ""
  echo "Type '--help name' to find out more about the argument 'name'."
  exit 1
elif [ $1 = "--help" ] && [ ! -z "$2" ]; then
  if [ $2 = "port" ]; then
    echo "This is the port of the device in which the sketch will be uploaded to. Can be emitted if just verifying."
  elif [ $2 = "verify" ]; then
    echo "Specifying this argument will only compile the script. No uploading will be done."
  elif [ $2 = "upload" ]; then
    echo "Specifying this argument will compile and upload the sketch to the given device port."
  else
    echo "This argument does not exist."
  fi
  exit 1
else
  PORT_ARG="--port $1"
  if [ -z "$2" ]; then
    COMMAND="--upload"
  elif [ $2 = "verify" ] || [ $2 = "upload" ]; then
    COMMAND="--$2"
  else
    echo "Syntax error. Please use --help for more info."
    exit 1
  fi   
fi

# If /build/ exists, remove.
if [ -d "$HERE/build/" ]; then
  echo "Build directory exists, removing..."
  eval "rm -rf \"$HERE/build/\""
fi

echo $VERSION
echo ""

case "$(uname -s)"
  in Darwin)
    ARDUINO_EXEC="/Applications/Arduino.app $COMMAND $HERE/Marlin/Marlin.ino --pref build.path=$HERE/build/ --pref board=rambo $PORT_ARG"
    ARDUINO_DEP="/Applications/Arduino.app/Contents/Java/hardware/arduino/avr/"
  ;; Linux)
    echo 'Linux'
  ;; CYGWIN*)
    CYGHERE="$(cygpath -aw $(pwd))"
    ARDUINO_EXEC="C:/Program\ Files\ \(x86\)/Arduino/arduino_debug.exe $COMMAND \"$CYGHERE/Marlin/Marlin.ino\" --pref build.path=$HERE/build/ --pref board=rambo $PORT_ARG"
    ARDUINO_DEP="C:/Program Files (x86)/Arduino/hardware/arduino/avr"
  ;;MINGW32*|MSYS*)
    ARDUINO_EXEC="C:/Program\ Files\ \(x86\)/Arduino/arduino_debug.exe $COMMAND $HERE/Marlin/Marlin.ino --pref build.path=$HERE/build/ --pref board=rambo $PORT_ARG"
    ARDUINO_DEP="C:/Program Files (x86)/Arduino/hardware/arduino/avr"
  ;; *)
    echo 'This operating system is unfamiliar'
esac

# Prepare for build by copying in RAMBo boards.txt and pins files

if [ -d "$ARDUINO_DEP/variants/rambo" ]; then
  eval "mv \"$ARDUINO_DEP/variants/rambo/\" \"$ARDUINO_DEP/variants/rambo_backup/\""
fi
# Even if a user doesn't have a rambo folder, they should have a boards.txt
eval "mv \"$ARDUINO_DEP/boards.txt\" \"$ARDUINO_DEP/boards_backup.txt\""
eval "cp \"$HERE/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/boards.txt\" \"$ARDUINO_DEP/\""
eval "cp -r \"$HERE/ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/variants/rambo/\" \"$ARDUINO_DEP/variants/rambo/\""

# Create the build directory
eval "mkdir \"$HERE/build/\""
eval $ARDUINO_EXEC
case "$?" in
  0) echo "The action has been performed successfully."
  ;;
  1) echo "There was an error building or uploading your sketch."
  ;;
  2) echo "The desired sketch was not found."
  ;;
  3) echo "Invalid argument option."
  ;;
  4) echo "The desired preference option does not exist."
  ;;
esac

# Clean Up
rm -rf ./build/
if [ -d "$ARDUINO_DEP/variants/rambo_backup" ]; then
  eval "rm \"$ARDUINO_DEP/boards.txt\""
  eval "rm -rf \"$ARDUINO_DEP/variants/rambo/\""
  eval "mv \"$ARDUINO_DEP/boards_backup.txt\" \"$ARDUINO_DEP/boards.txt\""
  eval "mv \"$ARDUINO_DEP/variants/rambo_backup/\" \"$ARDUINO_DEP/variants/rambo/\""
fi
